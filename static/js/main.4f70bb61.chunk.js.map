{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Footer/Footer.js","images/image.png","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Footer/Footer.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","jistify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","console","log","Chart","useState","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","toLocaleDateString","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","Footer","footer","App","state","fetchedData","setState","this","src","CoronaImage","image","alt","React","Component","ReactDom","render","document","getElementById"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,mOCgDpJC,EA3CD,SAAC,GAAsD,IAAD,IAApDC,KAAMC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,WAChD,OAAIH,EAIA,qBAAKI,UAAWC,IAAOC,UAAvB,SACI,eAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,SAApC,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAYW,IAAGV,IAAOW,KAAMX,IAAOY,UAA9E,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,uBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACI,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAKxB,EAAUyB,MAAOC,SAAU,IAAKC,UAAU,QAEtE,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAKzB,GAAY0B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,oDAGR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAYW,IAAGV,IAAOW,KAAMX,IAAOJ,WAA9E,SACI,eAACiB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,uBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACA,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAKvB,EAAUwB,MAAOC,SAAU,IAAKC,UAAU,QAElE,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAKzB,GAAY0B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,oDAGR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAYW,IAAGV,IAAOW,KAAMX,IAAOH,QAA9E,SACI,eAACgB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,oBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACA,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAKtB,EAAOuB,MAAOC,SAAU,IAAKC,UAAU,QAE/D,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAKzB,GAAY0B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,0DAhCT,c,yBCNTQ,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACjBC,EAAeJ,EAChBE,IACCE,EAAY,UAAMJ,EAAN,sBAAuBE,IAHlB,kBAMgDG,IAAMC,IAAIF,GAN1D,2BAMTnC,KAAMC,EANG,EAMHA,UAAWC,EANR,EAMQA,UAAWC,EANnB,EAMmBA,OAAQC,EAN3B,EAM2BA,WAN3B,kBAQV,CAACH,YAAWC,YAAWC,SAAQC,eARrB,2HAAH,sDAcTkC,EAAc,uCAAG,gCAAAJ,EAAA,+EAEDE,IAAMC,IAAN,UAAaN,EAAb,WAFC,uBAEf/B,EAFe,EAEfA,KACDuC,EAAevC,EAAKwC,KAAI,SAACC,GAAD,MAAgB,CAC1CxC,UAAWwC,EAAUxC,UAAUyC,MAC/BvC,OAAOsC,EAAUtC,OAAOuC,MACxBC,KAAMF,EAAUG,eANE,kBAQfL,GARe,wHAAH,qDAcdM,EAAc,uCAAG,8BAAAX,EAAA,+EAEWE,IAAMC,IAAN,UAAaN,EAAb,eAFX,uBAETe,EAFS,EAEf9C,KAAM8C,UAFS,kBAGfA,EAAUN,KAAI,SAACP,GAAD,OAAYA,EAAQc,SAHnB,gCAKtBC,QAAQC,IAAR,MALsB,yDAAH,qD,yBC4CZC,EAvED,SAAC,GAAgD,IAAD,IAA9ClD,KAAMC,EAAwC,EAAxCA,UAAUC,EAA8B,EAA9BA,UAAUC,EAAoB,EAApBA,OAAQ8B,EAAY,EAAZA,QAAY,EACxBkB,mBAAS,IADe,mBACnDV,EADmD,KACxCW,EADwC,KAI1DC,qBAAW,YACM,uCAAG,sBAAAnB,EAAA,kEACZkB,EADY,SACSd,IADT,6EAAH,qDAIbgB,KACF,IACFN,QAAQC,IAAIhD,EAAWC,EAAWC,GAElC,IAAMoD,EACFtD,EAEI,cAAC,MAAD,CACID,KAAQ,CACJwD,OAAO,CAAC,WAAW,YAAY,UAC/BC,SAAS,CAAC,CACNC,MAAM,SACNC,gBAAgB,CAAC,oBACjB,oBACA,qBACA3D,KAAM,CAACC,EAAUyB,MAAOxB,EAAUwB,MAAOvB,EAAOuB,UAIxDkC,QAAW,CACPC,OAAQ,CAACC,SAAQ,GACjBC,MAAM,CAACD,SAAQ,EAAME,KAAK,oBAAD,OAAqB/B,OAGtD,KAGFgC,EACFxB,EAAU,GAEV,cAAC,OAAD,CACIzC,KAAQ,CACJwD,OAAQf,EAAUD,KAAI,gBAAGG,EAAH,EAAGA,KAAH,OAAc,IAAId,KAAKc,GAAMuB,wBACnDT,SAAS,CAAC,CACNzD,KAAMyC,EAAUD,KAAI,qBAAEvC,aACtBkE,YAAa,UACbT,MAAM,WACNU,MAAM,GAQV,CACIpE,KAAMyC,EAAUD,KAAI,qBAAErC,UACtBgE,YAAa,MACbT,MAAM,SACNC,gBAAgB,uBAChBS,MAAM,OAGZ,KAEV,OACQ,qBAAK/D,UAAWC,IAAOC,UAAvB,SACK0B,EAAUsB,EAAUU,K,mCC9CtBI,EApBO,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAAyB,EACGnB,mBAAS,IADZ,mBACtCoB,EADsC,KACpBC,EADoB,KAS7C,OAPJnB,qBAAU,YACQ,uCAAG,sBAAAnB,EAAA,kEACbsC,EADa,SACc3B,IADd,6EAAH,qDAGdS,KACF,CAACkB,IAGK,cAACC,EAAA,EAAD,CAAapE,UAAWC,IAAOoE,YAA/B,SACI,eAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAW,SAACC,GAAD,OAAOR,EAAoBQ,EAAEC,OAAOrD,QAA7E,UACI,wBAAQA,MAAM,GAAd,oBACC6C,EAAiB/B,KAAI,SAACP,EAAS+C,GAAV,OAAgB,wBAAgBtD,MAAOO,EAAvB,SAAiCA,GAApB+C,Y,iBCLpDC,MAVf,WACI,OACI,mCACI,wBAAQ5E,UAAWC,IAAO4E,OAA1B,gC,iBCNG,MAA0B,kCCmC1BC,E,4MA7BXC,MAAQ,CACJpF,KAAK,GACLiC,QAAQ,I,EAMZqC,oB,uCAAsB,WAAMrC,GAAN,eAAAC,EAAA,sEAEQF,EAAUC,GAFlB,OAEZoD,EAFY,OAGlB,EAAKC,SAAS,CAACtF,KAAKqF,EAAYpD,QAAQA,IAHtB,2C,wPAHQD,I,OAApBqD,E,OACNE,KAAKD,SAAS,CAACtF,KAAKqF,I,qIAQf,IAAD,EACoBE,KAAKH,MAAtBpF,EADH,EACGA,KAAMiC,EADT,EACSA,QACjB,OACI,sBAAK5B,UAAaC,IAAOC,UAAzB,UACI,qBAAKiF,IAAKC,EAAapF,UAAWC,IAAOoF,MAAOC,IAAI,aACpD,cAAC,EAAD,CAAQ3F,KAAMuF,KAAKH,MAAMpF,OACzB,cAAC,EAAD,CAAesE,oBAAqBiB,KAAKjB,sBACzC,cAAC,EAAD,CAAOtE,KAAOA,EAAMiC,QAASA,IAC7B,cAAC,EAAD,W,GAvBM2D,IAAMC,WCDxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U,mBCHjDpG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCAhCD,EAAOC,QAAU,CAAC,OAAS,0B","file":"static/js/main.4f70bb61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1kyEE\",\"card\":\"Cards_card__3Dyeu\",\"infected\":\"Cards_infected__20dbM\",\"recovered\":\"Cards_recovered__1BinR\",\"deaths\":\"Cards_deaths__1sD-X\"};","import React from 'react'\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate}}) =>{\r\n    if(!confirmed){\r\n        return 'Loading...'\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} jistify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className ={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className ={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                        <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className ={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                        <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) =>{\r\n    let changableUrl = url;\r\n    if(country){\r\n        changableUrl = `${url}/countries/${country}`;\r\n    }\r\n    try{\r\n        const { data:{confirmed, recovered, deaths, lastUpdate} }= await axios.get(changableUrl);\r\n        \r\n        return {confirmed, recovered, deaths, lastUpdate};\r\n    }catch(error){\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async ()=> {\r\n    try{\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }) );\r\n        return modifiedData;\r\n    }catch(error){\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () =>{\r\n    try{\r\n        const {data:{countries}} = await axios.get(`${url}/countries`)\r\n        return countries.map((country) =>country.name);\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React,{useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data:{confirmed,recovered,deaths},country}) =>{\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n\r\n    useEffect( () =>{\r\n       const fetchAPI = async () => {\r\n            setDailyData ( await fetchDailyData());\r\n        }\r\n\r\n        fetchAPI();\r\n    },[]);\r\n    console.log(confirmed, recovered, deaths)\r\n\r\n    const barChart =(\r\n        confirmed\r\n        ? (\r\n            <Bar\r\n                data = {{\r\n                    labels:['Infected','Recovered','Deaths'],\r\n                    datasets:[{\r\n                        label:'People',\r\n                        backgroundColor:['rgba(0,0,255,0.5)',\r\n                        'rgba(0,255,0,0.5)',\r\n                        'rgba(255,0,0,0.5)'],\r\n                        data :[confirmed.value, recovered.value, deaths.value]\r\n\r\n                    }],\r\n                }}\r\n                options = {{\r\n                    legend: {display:false},\r\n                    title:{display:true, text:`Current state in ${country}`},\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    const lineChart = (\r\n        dailyData[0]\r\n        ?(\r\n        <Line \r\n            data = {{\r\n                labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n                datasets:[{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    borderColor: '#3333ff',\r\n                    label:'Infected',\r\n                    fill: true,\r\n                 }, //{\r\n                //     data: dailyData.map(({recovered}) => recovered),\r\n                //     borderColor: 'rgb(0,255,0,0.5)',\r\n                //     backgroundColor:'rgb(0,255,0,0.2)',\r\n                //     label:'Recovery',                    \r\n                //     fill: true,\r\n                // },\r\n                {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    borderColor: 'red',\r\n                    label:'Deaths',\r\n                    backgroundColor:'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                }],\r\n            }}\r\n        /> ): null\r\n    );\r\n    return(\r\n            <div className={styles.container}>\r\n                {country ? barChart :lineChart}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React,{useState,useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\nuseEffect(() =>{\r\n    const fetchAPI = async() =>{\r\n        setFetchedCountries (await fetchCountries());\r\n    }\r\n    fetchAPI();\r\n},[setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange ={(e) => handleCountryChange(e.target.value) }>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}                \r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport styles from './Footer.module.css'\r\n\r\nfunction Footer(){\r\n    return(\r\n        <>  \r\n            <footer className={styles.footer}>\r\n                Shashank | 2020\r\n            </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\r\nimport {Cards, Chart, CountryPicker, Footer} from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api';\r\nimport CoronaImage from './images/image.png';\r\nclass App extends React.Component{\r\n    state = {\r\n        data:{},\r\n        country:'',\r\n    }\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({data:fetchedData})\r\n    }\r\n    handleCountryChange = async(country) =>{\r\n        \r\n        const fetchedData = await fetchData(country);\r\n        this.setState({data:fetchedData,country:country});\r\n\r\n    }\r\n    render(){ \r\n        const {data, country} = this.state;\r\n    return(\r\n        <div className = {styles.container}>\r\n            <img src={CoronaImage} className={styles.image} alt=\"Covid-19\"/>\r\n            <Cards  data={this.state.data} /> \r\n            <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n            <Chart data ={data} country={country}/>    \r\n            <Footer />        \r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\n\r\nexport default App;","import React from 'react'\r\nimport ReactDom from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDom.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3fnxW\",\"image\":\"App_image__2REM1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__19LxN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__21RHo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__2cp5U\"};"],"sourceRoot":""}